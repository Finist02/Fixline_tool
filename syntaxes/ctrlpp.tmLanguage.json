{
	"information_for_contributors": [
		"This file has been converted from https://github.com/atom/language-c/blob/master/grammars/c%2B%2B.cson",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/atom/language-c/commit/3a269f88b12e512fb9495dc006a1dabf325d3d7f",
	"name": "Ctrl++",
	"scopeName": "source.ctrlpp",
	"patterns": [
		{
			"include": "#special_block"
		},
		{
			"include": "#strings"
		},
		{
			"match": "\\b(private|protected|public)\\b",
			"name": "storage.modifier.ctrlpp"
		},
		{
			"match": "\\b(catch|operator|try|using)\\b",
			"name": "keyword.control.ctrlpp"
		},
		{
			"match": "\\bdelete\\b(\\s*\\[\\])?|\\bnew\\b(?!])",
			"name": "keyword.control.ctrlpp"
		},
		{
			"match": "\\b(f|m)[A-Z]\\w*\\b",
			"name": "variable.other.readwrite.member.ctrlpp"
		},
		{
			"match": "\\bthis\\b",
			"name": "variable.language.this.ctrlpp"
		},
		{
			"match": "\\bnullptr\\b",
			"name": "constant.language.ctrlpp"
		},
		{
			"match": "\\btemplate\\b\\s*",
			"name": "storage.type.template.ctrlpp"
		},
		{
			"match": "\\b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\\b\\s*",
			"name": "keyword.operator.cast.ctrlpp"
		},
		{
			"match": "::",
			"name": "punctuation.separator.namespace.access.ctrlpp"
		},
		{
			"match": "\\b(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\b",
			"name": "keyword.operator.ctrlpp"
		},
		{
			"match": "\\b(class|typedef|static|struct|union)\\b",
			"name": "storage.type.ctrlpp"
		},
		{
			"match": "\\b(constexpr|export|mutable|typename|thread_local)\\b",
			"name": "storage.modifier.ctrlpp"
		},
		{
			"begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.ctrlpp"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.ctrl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.ctrl"
				}
			},
			"name": "meta.function.destructor.ctrlpp",
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		{
			"begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.ctrlpp"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.ctrl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.ctrl"
				}
			},
			"name": "meta.function.destructor.prototype.ctrlpp",
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		{
			"include": "source.ctrl"
		}
	],
	"repository": {
		"angle_brackets": {
			"begin": "<",
			"end": ">",
			"name": "meta.angle-brackets.ctrlpp",
			"patterns": [
				{
					"include": "#angle_brackets"
				},
				{
					"include": "$base"
				}
			]
		},
		"block": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.block.begin.bracket.curly.ctrl"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.block.end.bracket.curly.ctrl"
				}
			},
			"name": "meta.block.ctrlpp",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "support.function.any-method.ctrl"
						},
						"2": {
							"name": "punctuation.definition.parameters.ctrl"
						}
					},
					"match": "(?x)\n(\n  (?!while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\n  (?:\\b[A-Za-z_][A-Za-z0-9_]*+\\b|::)*+ # actual name\n)\n\\s*(\\() # opening bracket",
					"name": "meta.function-call.ctrl"
				},
				{
					"include": "$base"
				}
			]
		},
		"constructor": {
			"patterns": [
				{
					"begin": "(?x)\n(?:^\\s*)  # beginning of line\n((?!while|for|do|if|else|switch|catch|enumerate|r?iterate)[A-Za-z_][A-Za-z0-9_:]*) # actual name\n\\s*(\\()  # opening bracket",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.ctrlpp"
						},
						"2": {
							"name": "punctuation.definition.parameters.begin.ctrl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.ctrl"
						}
					},
					"name": "meta.function.constructor.ctrlpp",
					"patterns": [
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "(?x)\n(:)\n(\n  (?=\n    \\s*[A-Za-z_][A-Za-z0-9_:]* # actual name\n    \\s* (\\() # opening bracket\n  )\n)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.parameters.ctrl"
						}
					},
					"end": "(?=\\{)",
					"name": "meta.function.constructor.initializer-list.ctrlpp",
					"patterns": [
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"special_block": {
			"patterns": [
				{
					"begin": "\\b(using)\\b\\s*(namespace)\\b\\s*((?:[_A-Za-z][_A-Za-z0-9]*\\b(::)?)*)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.ctrlpp"
						},
						"2": {
							"name": "storage.type.ctrlpp"
						},
						"3": {
							"name": "entity.name.type.ctrlpp"
						}
					},
					"end": "(;)",
					"name": "meta.using-namespace-declaration.ctrlpp"
				},
				{
					"begin": "\\b(namespace)\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)?+",
					"beginCaptures": {
						"1": {
							"name": "storage.type.ctrlpp"
						},
						"2": {
							"name": "entity.name.type.ctrlpp"
						}
					},
					"captures": {
						"1": {
							"name": "keyword.control.namespace.$2"
						}
					},
					"end": "(?<=\\})|(?=(;|,|\\(|\\)|>|\\[|\\]|=))",
					"name": "meta.namespace-block.ctrlpp",
					"patterns": [
						{
							"begin": "\\{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.scope.ctrlpp"
								}
							},
							"end": "\\}",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.scope.ctrlpp"
								}
							},
							"patterns": [
								{
									"include": "#special_block"
								},
								{
									"include": "#constructor"
								},
								{
									"include": "$base"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "\\b(class|struct)\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)?+(\\s*:\\s*(public|protected|private)\\s*([_A-Za-z][_A-Za-z0-9]*\\b)((\\s*,\\s*(public|protected|private)\\s*[_A-Za-z][_A-Za-z0-9]*\\b)*))?",
					"beginCaptures": {
						"1": {
							"name": "storage.type.ctrlpp"
						},
						"2": {
							"name": "entity.name.type.ctrlpp"
						},
						"4": {
							"name": "storage.type.modifier.ctrlpp"
						},
						"5": {
							"name": "entity.name.type.inherited.ctrlpp"
						},
						"6": {
							"patterns": [
								{
									"match": "(public|protected|private)",
									"name": "storage.type.modifier.ctrlpp"
								},
								{
									"match": "[_A-Za-z][_A-Za-z0-9]*",
									"name": "entity.name.type.inherited.ctrlpp"
								}
							]
						}
					},
					"end": "(?<=\\})|(?=(;|\\(|\\)|>|\\[|\\]|=))",
					"name": "meta.class-struct-block.ctrlpp",
					"patterns": [
						{
							"include": "#angle_brackets"
						},
						{
							"begin": "\\{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.block.begin.bracket.curly.ctrlpp"
								}
							},
							"end": "(\\})(\\s*\\n)?",
							"endCaptures": {
								"1": {
									"name": "punctuation.section.block.end.bracket.curly.ctrlpp"
								},
								"2": {
									"name": "invalid.illegal.you-forgot-semicolon.ctrlpp"
								}
							},
							"patterns": [
								{
									"include": "#special_block"
								},
								{
									"include": "#constructor"
								},
								{
									"include": "$base"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "\\b(extern)(?=\\s*\")",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.ctrlpp"
						}
					},
					"end": "(?<=\\})|(?=\\w)|(?=\\s*#\\s*endif\\b)",
					"name": "meta.extern-block.ctrlpp",
					"patterns": [
						{
							"begin": "\\{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.block.begin.bracket.curly.ctrl"
								}
							},
							"end": "\\}|(?=\\s*#\\s*endif\\b)",
							"endCaptures": {
								"0": {
									"name": "punctuation.section.block.end.bracket.curly.ctrl"
								}
							},
							"patterns": [
								{
									"include": "#special_block"
								},
								{
									"include": "$base"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "(u|u8|U|L)?\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ctrlpp"
						},
						"1": {
							"name": "meta.encoding.ctrlpp"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ctrlpp"
						}
					},
					"name": "string.quoted.double.ctrlpp",
					"patterns": [
						{
							"match": "\\\\u\\h{4}|\\\\U\\h{8}",
							"name": "constant.character.escape.ctrlpp"
						},
						{
							"match": "\\\\['\"?\\\\abfnrtv]",
							"name": "constant.character.escape.ctrlpp"
						},
						{
							"match": "\\\\[0-7]{1,3}",
							"name": "constant.character.escape.ctrlpp"
						},
						{
							"match": "\\\\x\\h+",
							"name": "constant.character.escape.ctrlpp"
						},
						{
							"include": "source.c#string_placeholder"
						}
					]
				},
				{
					"begin": "(u|u8|U|L)?R\"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ctrlpp"
						},
						"1": {
							"name": "meta.encoding.ctrlpp"
						},
						"3": {
							"name": "invalid.illegal.delimiter-too-long.ctrlpp"
						}
					},
					"end": "\\)\\2(\\3)\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ctrlpp"
						},
						"1": {
							"name": "invalid.illegal.delimiter-too-long.ctrlpp"
						}
					},
					"name": "string.quoted.double.raw.ctrlpp"
				}
			]
		}
	}
}
