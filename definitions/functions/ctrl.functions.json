{
  "hover": {
    "format": "```\n${definition}\n```\n\n-------\n\nPredefined WinCC OA function\n\n${description}"
  },
  "completionItemKind": "Function",
  "defines": [
    {
      "definition": "unsigned myManNum()",
      "description": [
        "Returns the manager number of the UI manager."
      ],
      "id": "myManNum"
    },
    {
      "definition": "int myManId();",
      "description": [
        "Returns the manager ID as a number. The number contains coded the system, replica, type and number."
      ],
      "id": "myManId"
    },
    {
      "definition": "anytype invokeMethod(string|shape object, string methodName, [...]);",
      "description": [
        "invokeMethod."
      ],
      "id": "invokeMethod"
    },
    {
      "definition": "string getClipboardText();",
      "description": [
        "Возвращает текст из буфера обмена в виде обычного текста, или пустую строку, если буфер обмена не содержит текст."
      ],
      "id": "getClipboardText"
    },
    {
      "definition": "bool shapeExists (string graphicsName);",
      "description": [
        "Данная функция возвращает информацию о существовании графического элемента в панели."
      ],
      "id": "shapeExists"
    },
    {
      "definition": "void dpCopyConfig(string dpSource, string dpDestination, dyn_string sConfig, int &error, int iDriverNumber = -1);",
      "description": [
        "Функция dpCopyConfig() копирует конфигурацию из исходного элемента точки данных в целевой элемент точки данных."
      ],
      "id": "dpCopyConfig"
    },
    {
      "definition": "void isAckable(int iType, dyn_string &dsDPs, int &iReturnValue[, dyn_time dTimeOfAlarm = makeDynTime(), dyn_int diCntOfAlarm = makeDynInt()]);",
      "description": [
        "Функция CTRLLib.ctl function вызывается перед квитированием с помощью простого параметрирования (см. Квитирование)."
      ],
      "id": "isAckable"
    },
    {
      "definition": "int nameCheck (string &dpName [, int nameType]);",
      "description": [
        "Осуществляет проверку наличия допустимых символов в имени точки данных или в имени проекта."
      ],
      "id": "nameCheck"
    },
    {
      "definition": "int setClipboardText(string text);",
      "description": [
        "Копирует текст в виде обычного текста в буфер обмена."
      ],
      "id": "setClipboardText"
    },
    {
      "definition": "int getSystemId([string systemName]);",
      "description": [
        "Возвращает идентификатор системы.."
      ],
      "id": "getSystemId"
    },
    {
      "definition": "unsigned myManType()",
      "description": [
        "Returns the type of the current manager."
      ],
      "id": "myManType"
    },
    {
      "definition": "int httpServer([bool authRequired = true | string authMethod | dyn_string authmethod[, беззнаковый portNr = 80 [, беззнаковый SecurePortNr = 443]]]])",
      "description": [
        "Устанавливает и активирует HTTP-сервер."
      ],
      "id": "httpServer"
    },
    {
      "definition": "int httpConnect(string|function_ptr callBackFunc, string resourceName [, string contentType = \"text/html\"]);",
      "description": [
        "Registers a CTRL function as a Web resource"
      ],
      "id": "httpConnect"
    },
    {
      "definition": "mapping httpGetAllHeaders(int idx);",
      "description": [
        "The function returns a mapping of all HTTP headers."
      ],
      "id": "httpGetAllHeaders"
    },
    {
      "definition": "string httpGetMethod(int idx);",
      "description": [
        "The function returns the HTTP method of the last HTTP message."
      ],
      "id": "httpGetMethod"
    },
    {
      "definition": "string httpGetURI(int idx);",
      "description": [
        "Returns the last from the Client (index) requested URI from the HTTP server."
      ],
      "id": "httpGetURI"
    },
    {
      "definition": "mapping httpGetQuery(int idx);",
      "description": [
        "Returns the HTTP query elements as key/value pairs"
      ],
      "id": "httpGetQuery"
    },
    {
      "definition": "string httpGetHeader(int idx, string key);",
      "description": [
        "Returns the value of the header (== key) of the last HTTP message."
      ],
      "id": "httpGetHeader"
    },
    {
      "definition": "int convManIdToInt(char manType, char manNum [, int sysNum [, char replica]])",
      "description": [],
      "id": "convManIdToInt"
    },
    {
      "definition": "int getManIdFromInt(int manIdInt, char &manType, char &manNum [, int &sysNum [, char &replica]])",
      "description": [],
      "id": "getManIdFromInt"
    },
    {
      "definition": "int convManIntToName(int manIdInt, string &manName [, bool bNum[, bool bShort]])",
      "description": [],
      "id": "convManIntToName"
    },
    {
      "definition": "bool isEvConnOpen()",
      "description": [],
      "id": "isEvConnOpen"
    },
    {
      "definition": "int checkQuery(string aQuery)",
      "description": [],
      "id": "checkQuery"
    },
    {
      "definition": "time getCurrentTime()",
      "description": [
        "Returns the current time."
      ],
      "id": "getCurrentTime"
    },
    {
      "definition": "string getCatStr(string catalogue, string msgKey[, int lang])",
      "description": [
        "Exporting a catalog entry."
      ],
      "id": "getCatStr"
    },
    {
      "definition": "int system(string shellcommand [, string &stdout [, string &stderr]])",
      "description": [
        "Run a system shell command."
      ],
      "id": "system"
    },
    {
      "definition": "bool systemDetached(string command)",
      "description": [],
      "id": "systemDetached"
    },
    {
      "definition": "int exit(int exitCode = 0)",
      "description": [
        "Terminates a manager and passes the exit code to the operating system."
      ],
      "id": "exit"
    },
    {
      "definition": "bool startSound(string wavFileName [, bool loopSound = false])",
      "description": [
        "Plays a WAV file."
      ],
      "id": "startSound"
    },
    {
      "definition": "bool stopSound()",
      "description": [
        "Stops the playback of a WAV file."
      ],
      "id": "stopSound"
    },
    {
      "definition": "int translate(string inMeta, string &inTarget, int langIdx)",
      "description": [],
      "id": "translate"
    },
    {
      "definition": "int getDictionary(dyn_uint langIdxList, dyn_dyn_string &entries)",
      "description": [],
      "id": "getDictionary"
    },
    {
      "definition": "int mergeDictionary(dyn_uint langIdxList, dyn_dyn_string entries)",
      "description": [],
      "id": "mergeDictionary"
    },
    {
      "definition": "int readDictionary(string filename)",
      "description": [],
      "id": "readDictionary"
    },
    {
      "definition": "int writeDictionary(string filename)",
      "description": [],
      "id": "writeDictionary"
    },
    {
      "definition": "string getLocale(int langIdx)",
      "description": [],
      "id": "getLocale"
    },
    {
      "definition": "string getHostname()",
      "description": [],
      "id": "getHostname"
    },
    {
      "definition": "int beep([int frequency[, int duration]])",
      "description": [],
      "id": "beep"
    },
    {
      "definition": "getAllSystemNames()",
      "description": [
        "@warning OBSOLETE"
      ],
      "id": "getAllSystemNames"
    },
    {
      "definition": "int getSystemNames(dyn_string names, dyn_uint ids)",
      "description": [
        "Returns the name of the system."
      ],
      "id": "getSystemNames"
    },
    {
      "definition": "string getSystemName([int systemId])",
      "description": [
        "Returns a list of all the system names and system IDs known to the own system."
      ],
      "id": "getSystemName"
    },
    {
      "definition": "int userDefFunc(string libName, string fctName, dyn_anytype in, dyn_anytype out)",
      "description": [],
      "id": "userDefFunc"
    },
    {
      "definition": "int getGlobals(dyn_string names, dyn_int types)",
      "description": [],
      "id": "getGlobals"
    },
    {
      "definition": "int getGlobalType(string name)",
      "description": [],
      "id": "getGlobalType"
    },
    {
      "definition": "bool globalExists(string name)",
      "description": [],
      "id": "globalExists"
    },
    {
      "definition": "bool isDollarDefined(string param)",
      "description": [],
      "id": "isDollarDefined"
    },
    {
      "definition": "bool isFunctionDefined(string function)",
      "description": [],
      "id": "isFunctionDefined"
    },
    {
      "definition": "string getDollarValue(string param)",
      "description": [],
      "id": "getDollarValue"
    },
    {
      "definition": "string dollarSubstitute(string toSubstitute, dyn_string dollarParams)",
      "description": [],
      "id": "dollarSubstitute"
    },
    {
      "definition": "bool isAnswer()",
      "description": [],
      "id": "isAnswer"
    },
    {
      "definition": "bool isRefresh()",
      "description": [],
      "id": "isRefresh"
    },
    {
      "definition": "bool isDistributed()",
      "description": [],
      "id": "isDistributed"
    },
    {
      "definition": "bool isConnOpen(int manId)",
      "description": [],
      "id": "isConnOpen"
    },
    {
      "definition": "bool isConnActive(int manId)",
      "description": [],
      "id": "isConnActive"
    },
    {
      "definition": "int getKerberosSecurity([int manId])",
      "description": [],
      "id": "getKerberosSecurity"
    },
    {
      "definition": "bool useRDBArchive()",
      "description": [],
      "id": "useRDBArchive"
    },
    {
      "definition": "bool useValueArchive()",
      "description": [],
      "id": "useValueArchive"
    },
    {
      "definition": "bool useRDBGroups()",
      "description": [],
      "id": "useRDBGroups"
    },
    {
      "definition": "bool useQueryRDBDirect()",
      "description": [],
      "id": "useQueryRDBDirect"
    },
    {
      "definition": "int getOriginUserId()",
      "description": [],
      "id": "getOriginUserId"
    },
    {
      "definition": "int sysConnect([class object,] string|function_ptr work, string event])",
      "description": [],
      "id": "sysConnect"
    },
    {
      "definition": "int sysConnectUserData([class object,] string|function_ptr work, <any> userData, string event])",
      "description": [],
      "id": "sysConnectUserData"
    },
    {
      "definition": "int sysDisconnect([class object,] string|function_ptr work, string event)",
      "description": [],
      "id": "sysDisconnect"
    },
    {
      "definition": "int sysDisconnectUserData([class object,] string|function_ptr work, <any> userData, string event)",
      "description": [],
      "id": "sysDisconnectUserData"
    },
    {
      "definition": "bool ssaRelogin()",
      "description": [],
      "id": "ssaRelogin"
    },
    {
      "definition": "bool getACPResource(string resource, anytype &value)",
      "description": [],
      "id": "getACPResource"
    },
    {
      "definition": "bool isnan(float x)",
      "description": [],
      "id": "isnan"
    },
    {
      "definition": "bool isinf(float x)",
      "description": [],
      "id": "isinf"
    },
    {
      "definition": "string getenv(string str)",
      "description": [],
      "id": "getenv"
    },
    {
      "definition": "int setenv(string name, string value)",
      "description": [],
      "id": "setenv"
    },
    {
      "definition": "int delay(unsigned sec [, unsigned milli])",
      "description": [
        "Delays the next program step."
      ],
      "id": "delay"
    },
    {
      "definition": "int srand([unsigned seed])",
      "description": [],
      "id": "srand"
    },
    {
      "definition": "int rand()",
      "description": [
        "Calculates a sequence of integer pseudo random numbers."
      ],
      "id": "rand"
    },
    {
      "definition": "int secureRandom()",
      "description": [],
      "id": "secureRandom"
    },
    {
      "definition": "bool numberMatch(string pattern, int number)",
      "description": [],
      "id": "numberMatch"
    },
    {
      "definition": "string cryptoHash(string|blob data, string algorithm = \\\"MD5\\\")",
      "description": [
        "Allows to create a checksum for a string or blob element."
      ],
      "id": "cryptoHash"
    },
    {
      "definition": "string getFileCryptoHash(string fileName, string algorithm = \\\"MD5\\\")",
      "description": [],
      "id": "getFileCryptoHash"
    },
    {
      "definition": "string createUuid()",
      "description": [],
      "id": "createUuid"
    },
    {
      "definition": "int getType(expression)",
      "description": [
        "Query of the data type of any Control expression."
      ],
      "id": "getType"
    },
    {
      "definition": "string getTypeName(expression)",
      "description": [
        "Returns the data type of any Control expression as string."
      ],
      "id": "getTypeName"
    },
    {
      "definition": "bool checkScript(string scriptstr[, int &errorPos])",
      "description": [],
      "id": "checkScript"
    },
    {
      "definition": "int Debug(expression [, expression ...])",
      "description": [
        "Evaluates any Control expressions and writes the result to stderr"
      ],
      "id": "Debug"
    },
    {
      "definition": "int DebugN(expression [, expression ...])",
      "description": [
        "Evaluates any Control expressions and writes the result to stderr, followed by a new line."
      ],
      "id": "DebugN"
    },
    {
      "definition": "int DebugTN(expression [, expression ...])",
      "description": [
        "Evaluates any Control expressions and writes the result to stderr with a time stamp, followed by a new line."
      ],
      "id": "DebugTN"
    },
    {
      "definition": "int DebugFN(int|string debugFlag, expression [, expression ...])",
      "description": [
        "Evaluates any number of control expressions, if a specific debug flag is set and writes the result to stderr, followed by a new line."
      ],
      "id": "DebugFN"
    },
    {
      "definition": "int DebugFTN(int|string debugFlag, expression [, expression ...])",
      "description": [
        "Evaluates any number of control expressions, if a specific debug flag is set and writes the result with a time stamp to stderr followed by a new line."
      ],
      "id": "DebugFTN"
    },
    {
      "definition": "int DebugBreak(bool doBreak = true)",
      "description": [
        "The function allows to set a debug break point."
      ],
      "id": "DebugBreak"
    },
    {
      "definition": "string formatDebug(<any> x)",
      "description": [],
      "id": "formatDebug"
    },
    {
      "definition": "mapping makeMapping([key, value, ...])",
      "description": [
        "Creates a mapping with key-value pairs."
      ],
      "id": "makeMapping"
    },
    {
      "definition": "int mappinglen(mapping m)",
      "description": [
        "Returns the length of a mapping (associative array)."
      ],
      "id": "mappinglen"
    },
    {
      "definition": "dyn_anytype mappingKeys(mapping m)",
      "description": [],
      "id": "mappingKeys"
    },
    {
      "definition": "bool mappingHasKey(mapping m, <type> key)",
      "description": [
        "Checks if the \"key\" exists in a mapping."
      ],
      "id": "mappingHasKey"
    },
    {
      "definition": "<type> mappingGetKey(mapping m, int idx)",
      "description": [],
      "id": "mappingGetKey"
    },
    {
      "definition": "<type> mappingGetValue(mapping m, int idx)",
      "description": [],
      "id": "mappingGetValue"
    },
    {
      "definition": "int mappingRemove(mapping &m, <type> key)",
      "description": [],
      "id": "mappingRemove"
    },
    {
      "definition": "int mappingClear(mapping &m)",
      "description": [
        "Deletes all entries of a mapping."
      ],
      "id": "mappingClear"
    },
    {
      "definition": "int startThread([class object,] string|function_ptr func[, args ...])",
      "description": [
        "Starts a function in a new thread."
      ],
      "id": "startThread"
    },
    {
      "definition": "int stopThread(int threadId)",
      "description": [
        "Stops a thread."
      ],
      "id": "stopThread"
    },
    {
      "definition": "int getThreadId()",
      "description": [
        "Returns the identification number of the current thread."
      ],
      "id": "getThreadId"
    },
    {
      "definition": "int waitThread(int threadId)",
      "description": [],
      "id": "waitThread"
    },
    {
      "definition": "string errorText(unsigned code[, unsigned langIdx])",
      "description": [],
      "id": "errorText"
    },
    {
      "definition": "int addGlobal(string name, unsigned type)",
      "description": [
        "| Parameter | Description |",
        "|-----------|-------------|",
        "| type      | Type        |",
        "| name      | Designation |",
        "",
        "Creates a variable of the type **type** with the designation **name** and makes it into a control-wide variable (only restricted to the current manager)."
      ],
      "id": "addGlobal"
    },
    {
      "definition": "int removeGlobal(string name)",
      "description": [],
      "id": "removeGlobal"
    },
    {
      "definition": "int getBit(bit32|bit64 aBitVar, int position)",
      "description": [],
      "id": "getBit"
    },
    {
      "definition": "int setBit(bit32|bit64 &aBitVar, int position, bool value)",
      "description": [],
      "id": "setBit"
    },
    {
      "definition": "int checkPattern(bit32|bit64 aBitVar, string pattern)",
      "description": [],
      "id": "checkPattern"
    },
    {
      "definition": "int setPattern(bit32|bit64 &aBitVar, string pattern)",
      "description": [],
      "id": "setPattern"
    },
    {
      "definition": "int getNoOfLangs()",
      "description": [],
      "id": "getNoOfLangs"
    },
    {
      "definition": "int getActiveLang()",
      "description": [
        "Outputs the active language."
      ],
      "id": "getActiveLang"
    },
    {
      "definition": "int getParamLang()",
      "description": [],
      "id": "getParamLang"
    },
    {
      "definition": "int getMetaLang()",
      "description": [],
      "id": "getMetaLang"
    },
    {
      "definition": "int getGlobalLangId(int langIdx)",
      "description": [],
      "id": "getGlobalLangId"
    },
    {
      "definition": "int getLangIdx(int id)/int getLangIdx(string id)",
      "description": [],
      "id": "getLangIdx"
    },
    {
      "definition": "int setLangString(langString &aLangString, int index, string aText)",
      "description": [],
      "id": "setLangString"
    },
    {
      "definition": "bool isLightRedundant()",
      "description": [],
      "id": "isLightRedundant"
    },
    {
      "definition": "bool isRedundant()",
      "description": [],
      "id": "isRedundant"
    },
    {
      "definition": "dyn_string eventHost()",
      "description": [],
      "id": "eventHost"
    },
    {
      "definition": "dyn_string dataHost()",
      "description": [],
      "id": "dataHost"
    },
    {
      "definition": "unsigned eventPort()",
      "description": [],
      "id": "eventPort"
    },
    {
      "definition": "unsigned dataPort()",
      "description": [],
      "id": "dataPort"
    },
    {
      "definition": "int myReduHostNum()",
      "description": [],
      "id": "myReduHostNum"
    },
    {
      "definition": "string myReduHost()",
      "description": [],
      "id": "myReduHost"
    },
    {
      "definition": "unsigned pmonPort()",
      "description": [],
      "id": "pmonPort"
    },
    {
      "definition": "int setTrace(int traceLevel)",
      "description": [],
      "id": "setTrace"
    },
    {
      "definition": "int maxINT()",
      "description": [],
      "id": "maxINT"
    },
    {
      "definition": "int minINT()",
      "description": [],
      "id": "minINT"
    },
    {
      "definition": "unsigned maxUINT()",
      "description": [],
      "id": "maxUINT"
    },
    {
      "definition": "unsigned minUINT()",
      "description": [],
      "id": "minUINT"
    },
    {
      "definition": "float maxFLOAT()",
      "description": [],
      "id": "maxFLOAT"
    },
    {
      "definition": "float minFLOAT()",
      "description": [],
      "id": "minFLOAT"
    },
    {
      "definition": "ulong maxULONG()",
      "description": [],
      "id": "maxULONG"
    },
    {
      "definition": "ulong minULONG()",
      "description": [],
      "id": "minULONG"
    },
    {
      "definition": "long maxLONG()",
      "description": [],
      "id": "maxLONG"
    },
    {
      "definition": "long minLONG()",
      "description": [],
      "id": "minLONG"
    },
    {
      "definition": "int evalScript(anytype &retVal, string script [, dyn_string dollars [,<type> <arg> ...]])",
      "description": [
        "Allows to execute a script during runtime and to write the return value of the script in target."
      ],
      "id": "evalScript"
    },
    {
      "definition": "int execScript(string script [, dyn_string dollars [,<type> <arg> ...]])",
      "description": [],
      "id": "execScript"
    },
    {
      "definition": "int evalScriptRestricted(anytype &retVal, string script [, dyn_string dollars [,<type> <arg> ...]])",
      "description": [],
      "id": "evalScriptRestricted"
    },
    {
      "definition": "int execScriptRestricted(string script [, dyn_string dollars [,<type> <arg> ...]])",
      "description": [],
      "id": "execScriptRestricted"
    },
    {
      "definition": "int startScript(string|int script [, dyn_string dollars [, string func, [dyn_anytype args]]])",
      "description": [],
      "id": "startScript"
    },
    {
      "definition": "int stopScript(int id)",
      "description": [],
      "id": "stopScript"
    },
    {
      "definition": "int blobZero(blob &target, int len)",
      "description": [],
      "id": "blobZero"
    },
    {
      "definition": "int blobSetValue(blob &target, int pos, type value, int len [, bool bigendian])",
      "description": [],
      "id": "blobSetValue"
    },
    {
      "definition": "int blobGetValue(blob source, int pos, type &value, int len [, bool bigendian])",
      "description": [],
      "id": "blobGetValue"
    },
    {
      "definition": "int blobAppendValue(blob &target, type value, int len [, bool bigendian])",
      "description": [],
      "id": "blobAppendValue"
    },
    {
      "definition": "int bloblen(blob source)",
      "description": [],
      "id": "bloblen"
    },
    {
      "definition": "int blobWrite(blob source, file fd)",
      "description": [],
      "id": "blobWrite"
    },
    {
      "definition": "int blobRead(blob &target, int len, file fd)",
      "description": [],
      "id": "blobRead"
    },
    {
      "definition": "int OPCEnumQuery(int type, dyn_string in, dyn_string &out)",
      "description": [],
      "id": "OPCEnumQuery"
    },
    {
      "definition": "string getHostByName(string name[, dyn_string &addr_list])",
      "description": [],
      "id": "getHostByName"
    },
    {
      "definition": "string getHostByAddr(string name)",
      "description": [],
      "id": "getHostByAddr"
    },
    {
      "definition": "dyn_mapping getNetworkDevices()",
      "description": [],
      "id": "getNetworkDevices"
    },
    {
      "definition": "int va_start(va_list)",
      "description": [],
      "id": "va_start"
    },
    {
      "definition": "<type> va_arg(va_list)",
      "description": [],
      "id": "va_arg"
    },
    {
      "definition": "int va_end(va_list)",
      "description": [],
      "id": "va_end"
    },
    {
      "definition": "int registerDbgFlag(string name)",
      "description": [],
      "id": "registerDbgFlag"
    },
    {
      "definition": "unsigned sizeof(<type> var)",
      "description": [],
      "id": "sizeof"
    },
    {
      "definition": "dyn_string getStackTrace()",
      "description": [
        "Returns a dynamic string with the stack trace (call stack) from this position of the code."
      ],
      "id": "getStackTrace"
    },
    {
      "definition": "bool isDbgFlag(string name | int flag)",
      "description": [],
      "id": "isDbgFlag"
    },
    {
      "definition": "int setDbgFlag(string name | int flag, bool on = true)",
      "description": [],
      "id": "setDbgFlag"
    },
    {
      "definition": "string findExecutable(string name)",
      "description": [],
      "id": "findExecutable"
    },
    {
      "definition": "<type> getVariable(string which)",
      "description": [],
      "id": "getVariable"
    },
    {
      "definition": "int setVariable(string which, <type> value)",
      "description": [
        "The function allows to set the value of the stated variable."
      ],
      "id": "setVariable"
    },
    {
      "definition": "<type> callFunction(string|function_ptr func, ...)",
      "description": [],
      "id": "callFunction"
    },
    {
      "definition": "mapping enumValues(string enumName)",
      "description": [],
      "id": "enumValues"
    },
    {
      "definition": "dyn_string enumKeys(string enumName)",
      "description": [],
      "id": "enumKeys"
    },
    {
      "definition": "bool isInstanceOf(class|enum instance, string typeName)",
      "description": [],
      "id": "isInstanceOf"
    },
    {
      "definition": "string getComponentName(int component)",
      "description": [],
      "id": "getComponentName"
    },
    {
      "definition": "anytype getVersionInfo(string key)",
      "description": [],
      "id": "getVersionInfo"
    },
    {
      "definition": "anytype jsonDecode(string json)",
      "description": [
        "JSON is a data exchange format and uses human-readable text for transmitting data objects. The data objects consist of attribute-value pairs and a sorted list of values. It is largely used instead of XML. Furthermore, it is used for asynchronous browser/server communication (AJAX).",
        "The JSON text format is independent of programming languages and is therefore ideally suited for data exchange.",
        "The function jsonDecode() decodes a string variable."
      ],
      "id": "jsonDecode"
    },
    {
      "definition": "string jsonEncode(anytype any [, bool compactFormat = true])",
      "description": [
        "JSON is a data exchange format and uses human-readable text for transmitting data objects. JSON builds two structures:",
        "",
        "- Name/value pairs. In different languages this is implemented as an object (object), a set (record), a structure (struct), a dictionary or a directory (dictionary), a hash table (hash table), a key list (keyed list) or as an associative array (associative array).",
        "- An ordered list of values. In most languages it is implemented as an array, a vector or a list.",
        "",
        "It is largely used instead of XML. Furthermore, it is used for asynchronous browser/server communication (AJAX).",
        "",
        "The JSON text format is independent of programming languages and is therefore ideally suited for data exchange.",
        "",
        "The function jsonEncode() encodes a dyn_data type, a mapping, a simple value, an enum or a class/struct variable."
      ],
      "id": "jsonEncode"
    },
    {
      "definition": "int base64Decode(string encoded, string|blob &decoded)",
      "description": [],
      "id": "base64Decode"
    },
    {
      "definition": "string base64Encode(string|blob data)",
      "description": [],
      "id": "base64Encode"
    },
    {
      "definition": "int regexpSplit(string regexp, string line, dyn_string &result [, mapping options])",
      "description": [],
      "id": "regexpSplit"
    },
    {
      "definition": "int regexpIndex(string regexp, string line [, mapping options])",
      "description": [],
      "id": "regexpIndex"
    },
    {
      "definition": "int regexpLastIndex(string regexp, string line [, mapping options])",
      "description": [],
      "id": "regexpLastIndex"
    },
    {
      "definition": "int semAcquire(string id, int n = 1 [, time timeout])",
      "description": [],
      "id": "semAcquire"
    },
    {
      "definition": "int semRelease(string id, int n = 1)",
      "description": [],
      "id": "semRelease"
    },
    {
      "definition": "int semAvailable(string id)",
      "description": [],
      "id": "semAvailable"
    },
    {
      "definition": "bool equalPtr(shared_ptr left, shared_ptr right)",
      "description": [],
      "id": "equalPtr"
    },
    {
      "definition": "int assignPtr(shared_ptr &target, shared_ptr source)",
      "description": [],
      "id": "assignPtr"
    },
    {
      "definition": "int fontSelector(string | langString &fontstr);",
      "description": [
        "Открывает селектор типа шрифта и записывает выбор в переменную."
      ],
      "id": "fontSelector"
    },
    {
      "definition": "string myModuleName();",
      "description": [
        "Возвращает имя текущей системы."
      ],
      "id": "myModuleName"
    },
    {
      "definition": "string myPanelName();",
      "description": [
        "Возвращает имя текущей панели."
      ],
      "id": "myPanelName"
    },
    {
      "definition": "shape object = getShape(string name);",
      "description": [
        "С помощью этой функции CTRL можно обращаться к графическим объектам (вместо setValue()) и устанавливать атрибуты."
      ],
      "id": "getShape"
    },
    {
      "definition": "shape addShape(shape panel, int layer, string shapeType, string shapeName);\nshape addShape(string moduleName, string panelName, int layer, string shapeType, string shapeName);",
      "description": [
        "Adds a new shape into a panel."
      ],
      "id": "addShape"
    },
    {
      "definition": "string myDisplayName();",
      "description": [
        "Возвращает информацию дисплея, используемого пользователем на данный момент."
      ],
      "id": "myDisplayName"
    },
    {
      "definition": "int openURL(строковый URL);",
      "description": [
        "Функция openURL используется для открытия файлов, расположенных по произвольным URL-адресам во внешних приложениях."
      ],
      "id": "openUrl"
    },
    {
      "definition": "int popupMenu(dyn_string text, int &answer);",
      "description": [
        "Активация контекстно-зависимого меню щелчком правой кнопки мыши."
      ],
      "id": "popupMenu"
    },
    {
      "definition": "int getCursorPosition(int &x, int &y, [bool globalPos = FALSE]);",
      "description": [
        "Возвращает текущую позицию курсора мыши на панели или экране."
      ],
      "id": "getCursorPosition"
    },
    {
      "definition": "int paCfgReadValueList(string filename, string section, string key, dyn_string &value[, string separator[, string host]]);",
      "description": [
        "Функция считывает все значения параметра конфигурации, которые встречаются в файле конфигурации более одного раза."
      ],
      "id": "paCfgReadValueList"
    },
    {
      "definition": "int paCfgReadValue([dyn_]string fileName, string section, string key, <type> &value[, string host]);",
      "description": [
        "Функция считывает все значения параметра конфигурации."
      ],
      "id": "paCfgReadValue"
    },
    {
      "definition": "<type> paCfgReadValueDflt(string filename, string section, string key, <type> dfltValue[, bool & isDflt [,string host]]);",
      "description": [
        "The function returns either the value of the found entry or the default value."
      ],
      "id": "paCfgReadValueDflt"
    },
    {
      "definition": "isSplitModeActive(bool &bAnswer, string System = ;",
      "description": [
        "Возвращает информацию о том, активирован ли в системе разделенный режим."
      ],
      "id": "isSplitModeActive"
    },
    {
      "definition": "anytype getApplicationProperty(string property);",
      "description": [
        "Возвращает дополнительную информацию о клиенте (браузере), подключенном к HTTP-серверу, или проверяет использование таблицы стилей."
      ],
      "id": "getApplicationProperty"
    },
    {
      "definition": "int setApplicationProperty(string property, <type> value);",
      "description": [
        "Позволяет редактировать свойства приложения."
      ],
      "id": "setApplicationProperty"
    },
    {
      "definition": "isSplitModeActive(bool &bAnswer, string System = \"\");",
      "description": [
        "Возвращает информацию о том, активирован ли в системе разделенный режим."
      ],
      "id": "isSplitModeActive"
    },
    {
      "definition": "int reduActive(int &iAnswer, string sSystem = \"\")",
      "description": [
        "В резервированной системе возвращает данные об активном компьютере."
      ],
      "id": "reduActive"
    },
    {
      "definition": "int colorToRgb(string color, int &red, int &green, int &blue, int &alpha);",
      "description": [
        "Функция извлекает значения RGB из данного цвета."
      ],
      "id": "colorToRgb"
    },
    {
      "definition": "int printTable ([string shapeName, [bool showDialog, [dyn_string header, [dyn_string footer, [int columnsType,   [dyn_string | dyn_int columns, [bool fitToPage, [bool landscape, [bool gridLines, [bool gridBackground, [dyn_int margin, [string printerName, [string printFont]]]]...]);",
      "description": [
        "Выводит на печать таблицу."
      ],
      "id": "printTable"
    },
    {
      "definition": "int triggerGlobalEvent(строковое событие, ...);",
      "description": [
        "Функция запускает глобальное событие пользовательского интерфейса."
      ],
      "id": "triggerGlobalEvent"
    },
    {
      "definition": "int langEditor(langString &ls[, bool multiLine = FALSE]);",
      "description": [
        "Открывает языковой редактор (\"langEditor\")"
      ],
      "id": "langEditor"
    },
    {
      "definition": "OaLanguage getActiveLang();",
      "description": [
        "Returns the active language as an OaLanguage Enum. This function is the same as getActiveLang() but uses the OaLanguage Enum as return value."
      ],
      "id": "getActiveLangId"
    },
    {
      "definition": "int getNoOfLangs();",
      "description": [
        "Gets the number of languages currently available."
      ],
      "id": "getNoOfLangs"
    },
    {
      "definition": "int aes256Decrypt(blob src, string key, string|blob &dest);",
      "description": [
        "The aes256Decrypt function in WinCC OA allows you to decrypt information that has been encrypted using the AES-256 algorithm."
      ],
      "id": "aes256Decrypt"
    },
    {
      "definition": "int aes256Encrypt(string|blob src, string key, blob &dest);",
      "description": [
        "The aes256Encrypt function in WinCC OA allows you to encrypt information using the AES-256 algorithm."
      ],
      "id": "aes256Encrypt"
    },
    {
      "definition": "bool isMobileDevice();",
      "description": [
        "The isMobileDevice() function in WinCC OA is used to determine if the device from which the function is called is a mobile device (specifically Android or iOS)."
      ],
      "id": "isMobileDevice"
    },
    {
      "definition": "int RSAGenerateKeyPair(string &publicPEM, string &privatePEM[, int bits = 2048]);",
      "description": [
        "The function RSAGenerateKeyPair() generates a public and a private key for the functions RSASealEnvelope() and RSAOpenEnvelope()."
      ],
      "id": "RSAGenerateKeyPair"
    },
    {
      "definition": "int RSAOpenEnvelope(string keyAddress, blob encryptedData, blob& outputData)",
      "description": [
        "The function RSAOpenEnvelope() decrypts data."
      ],
      "id": "RSAOpenEnvelope"
    },
    {
      "definition": "int RSASealEnvelope(string keyAddress, blob inputData, blob& encryptedData)",
      "description": [
        "The function RSASealEnvelope() encrypts data."
      ],
      "id": "RSASealEnvelope"
    }
  ]
}